BasePath = ''
ProgramPath = nil

function LoadAPIs(self)
	local function loadAPI(name, content)
		local env = setmetatable({}, { __index = getfenv() })
		local func, err = loadstring(content, name..' (Bedrock API)')
		if not func then
			return false, printError(err)
		end
		setfenv(func, env)
		func()
		local api = {}
		for k,v in pairs(env) do
			api[k] = v
		end
		_G[name] = api
		return true
	end

	local env = getfenv()
	local function loadObject(name, content)
		loadAPI(name, content)
		if env[name].Inherit then
			if not getfenv()[env[name].Inherit] then	
				if objects[env[name].Inherit] then
					loadObject(env[name].Inherit, objects[env[name].Inherit])
				elseif fs.exists(self.ProgramPath..'/Objects/'..env[name].Inherit..'.lua') then
					local h = fs.open(self.ProgramPath..'/Objects/'..env[name].Inherit..'.lua', 'r')
					loadObject(env[name].Inherit, h.readAll())
					h.close()
					loadObject(name, content)
					return
				end
			end
			env[name].__index = getfenv()[env[name].Inherit]
		else
			env[name].__index = Object
		end
		setmetatable(env[name], env[name])
	end

	for k, v in pairs(apis) do
		loadAPI(k, v)
		if k == 'Helpers' then
			self.Helpers = Helpers
		end
	end

	for k, v in pairs(objects) do
		loadObject(k, v)
	end
	
	local privateObjPath = self.ProgramPath..'/Objects/'
	if fs.exists(privateObjPath) and fs.isDir(privateObjPath) then
		for i, v in ipairs(fs.list(privateObjPath)) do
			if v ~= '.DS_Store' then
				local name = string.match(v, '(%w+)%.?.-')
				local h = fs.open(privateObjPath..v, 'r')
				loadObject(name, h.readAll())
				h.close()
			end
		end
	end
	
	local privateAPIPath = self.ProgramPath..'/APIs/'
	if fs.exists(privateAPIPath) and fs.isDir(privateAPIPath) then
		for i, v in ipairs(fs.list(privateAPIPath)) do
			if v ~= '.DS_Store' then
				local name = string.match(v, '(%w+)%.?.-')
				local h = fs.open(privateAPIPath..v, 'r')
				loadAPI(name, h.readAll())
				h.close()
			end
		end
	end
end

AllowTerminate = true

View = nil
Menu = nil

ActiveObject = nil

DrawTimer = nil
DrawTimerExpiry = 0

IsDrawing = false

Running = true

DefaultView = 'main'

AnimationEnabled = true

EventHandlers = {
	
}

ObjectClickHandlers = {
	
}

ObjectUpdateHandlers = {
	
}

Timers = {
	
}

ModifierKeys = {}
KeyboardShortcuts = {}

keys.leftCommand = 219
keys.rightCommand = 220

function Initialise(self, programPath)
	self.ProgramPath = programPath or self.ProgramPath
	if not programPath then
		if self.ProgramPath then
			local prgPath = self.ProgramPath
			local prgName = fs.getName(prgPath)
			if prgPath:find('/') then 
				self.ProgramPath = prgPath:sub(1, #prgPath-#prgName-1)
				self.ProgramPath = prgPath:sub(1, #prgPath-#prgName-1) 
			else 
		 		self.ProgramPath = '' 
		 	end
		else
			self.ProgramPath = ''
		end
	end
	self:LoadAPIs()
	self.ViewPath = self.ProgramPath .. '/Views/'
	--first, check that the barebones APIs are available
	local requiredApis = {
		'Drawing',
		'View'
	}
	local env = getfenv()
	for i,v in ipairs(requiredApis) do
		if not env[v] then
			error('The API: '..v..' is not loaded. Please make sure you load it to use Bedrock.')
		end
	end

	local copy = { }
	for k, v in pairs(self) do
		if k ~= 'Initialise' then
			copy[k] = v
		end
	end
	return setmetatable(copy, getmetatable(self))
end

function HandleClick(self, event, side, x, y)
	if self.Menu then
		if not self.View:DoClick(self.Menu, event, side, x, y) then
			self.Menu:Close()
		end
	elseif self.Window then
		if not self.View:CheckClick(self.Window, x, y) then
			self.Window:Flash()
		else
			self.View:DoClick(self.Window, event, side, x, y)
		end
	elseif self.View then
		if self.View:Click(event, side, x, y) ~= false then
		end		
	end
end

function UnregisterKeyboardShortcut(self, name)
	if name then
		self.KeyboardShortcuts[name] = nil
	end
end

function RegisterKeyboardShortcut(self, keys, func, name)
	name = name or tostring(math.random(1, 10000))
	if type(keys[1]) == 'table' then
		for i, v in ipairs(keys) do
			self.KeyboardShortcuts[name] = {Keys = v, Function = func}
		end
	else
		self.KeyboardShortcuts[name] = {Keys = keys, Function = func}
	end
	return name
end

function TryKeyboardShortcuts(self, keychar)
	if keychar == keys.backspace then
		keychar = keys.delete
	end

	local len = 1 -- + keychar
	for k, v in pairs(self.ModifierKeys) do
		len = len + 1
	end

	if type(keychar) == 'string' then
		keychar = keychar:lower()
	end

	for _, shortcut in pairs(self.KeyboardShortcuts) do
		local match = true
		for i2, key in ipairs(shortcut.Keys) do
			if type(keychar) == 'string' then
				keychar = keychar:lower()
			end

			if self.ModifierKeys[key] == nil and key ~= keychar  then
				match = false
			end
		end

		if match and #shortcut.Keys == len then
			return shortcut.Function() ~= false
		end
	end
end

function HandleKeyChar(self, event, keychar)
	if keychar == keys.leftCtrl or keychar == keys.leftShift or keychar == keys.leftAlt or keychar == keys.leftCommand or keychar == keys.rightCommand or keychar == keys.rightCtrl or keychar == keys.rightShift or keychar == keys.rightAlt then
		if keychar == keys.leftCommand or keychar == keys.rightCommand or keychar == keys.rightCtrl then
			keychar = keys.leftCtrl
		elseif keychar == keys.rightAlt then
			keychar = keys.leftAlt
		elseif keychar == keys.rightShift then
			keychar = keys.leftShift
		end
		self.ModifierKeys[keychar] = self:StartTimer(function(_, timer)
			if timer == self.ModifierKeys[keychar] then
				self.ModifierKeys[keychar] = nil
			end
		end, 1)
	elseif self:TryKeyboardShortcuts(keychar) then
		return
	end

	if self:GetActiveObject() then
		local activeObject = self:GetActiveObject()
		if activeObject.OnKeyChar then
			if activeObject:OnKeyChar(event, keychar) ~= false then
				--self:Draw()
			end
		end
	end
end

PreparedMenus = {}

function PrepareMenu(self, name)
	local menu = self:AddObject(name, {Type = 'Menu', X = 1, Y = 1, Prepared = true})
	menu.Visible = false
	self.PreparedMenus[name] = menu
	return menu
end

function ToggleMenu(self, name, owner, x, y)
	if self.Menu then
		self.Menu:Close()
		return false
	else
		self:SetMenu(name, owner, x, y)
		return true
	end
end

function SetMenu(self, menu, owner, x, y)
	x = x or 1
	y = y or 1
	if self.Menu then
		self.Menu:Close()
	end	
	if menu then
		local pos = owner:GetPosition()
		if self.PreparedMenus[menu] then
			self.Menu = self.PreparedMenus[menu]
			self.Menu.Visible = true
			self.Menu.Owner = owner
			self.Menu.X = pos.X + x - 1
			self.Menu.Y = pos.Y + y
			self.Menu.Z = self.View.Children[#self.View.Children].Z + 1
			self:ReorderObjects()
		else
			self.Menu = self:AddObject(menu, {Type = 'Menu', Owner = owner, X = pos.X + x - 1, Y = pos.Y + y, Z = self.View.Children[#self.View.Children].Z + 1})
		end
	end
end

function ObjectClick(self, name, func)
	self.ObjectClickHandlers[name] = func
end

function ClickObject(self, object, event, side, x, y)
	if self.ObjectClickHandlers[object.Name] then
		return self.ObjectClickHandlers[object.Name](object, event, side, x, y)
	end
	return false
end

function ObjectUpdate(self, name, func)
	self.ObjectUpdateHandlers[name] = func
end

function UpdateObject(self, object, ...)
	if self.ObjectUpdateHandlers[object.Name] then
		self.ObjectUpdateHandlers[object.Name](object, ...)
		--self:Draw()
	end
end

function GetAbsolutePosition(self, obj)
	if not obj.Parent then
		return {X = obj.X, Y = obj.Y}
	else
		local pos = self:GetAbsolutePosition(obj.Parent)
		local x = pos.X + obj.X - 1
		local y = pos.Y + obj.Y - 1
		if not obj.Fixed and obj.Parent.ChildOffset then
			x = x + obj.Parent.ChildOffset.X
			y = y + obj.Parent.ChildOffset.Y
		end
		return {X = x, Y = y}
	end
end

function LoadView(self, name, draw)
	if self.View and self.OnViewClose then
		self.OnViewClose(self.View.Name)
	end
	if self.View then
		self.View:OnRemove()
	end
	local success = false

	if Drawing.Screen.Width <= 26 and fs.exists(self.ViewPath..name..'-pocket.view') then
		name = name..'-pocket'
	elseif Drawing.Screen.Width <= 39 and fs.exists(self.ViewPath..name..'-turtle.view') then
		name = name..'-turtle'
	end

	if not fs.exists(self.ViewPath..name..'.view') then
		error('The view: '..name..'.view does not exist.')
	end

	local h = fs.open(self.ViewPath..name..'.view', 'r')
	if h then
		local view = textutils.unserialize(h.readAll())
		h.close()
		if view then
			self.View = View:InitialiseFile(self, view, name)
			self:ReorderObjects()

			if OneOS and view.ToolBarColour then
				OneOS.ToolBarColour = view.ToolBarColour
			end
			if OneOS and view.ToolBarTextColour then
				OneOS.ToolBarTextColour = view.ToolBarTextColour
			end
			if not self:GetActiveObject() then
				self:SetActiveObject()
			end
			success = true
		end
	end

	if success and self.OnViewLoad then
		self.OnViewLoad(name)
	end

	if draw ~= false then
		self:Draw()
	end

	if not success then
		error('Failed to load view: '..name..'. It probably isn\'t formatted correctly. Did you forget a } or ,?')
	end

	return success
end

function InheritFile(self, file, name)
	local h = fs.open(self.ViewPath..name..'.view', 'r')
	if h then
		local super = textutils.unserialize(h.readAll())
		if super then
			if type(super) ~= 'table' then
				error('View: "'..name..'.view" is not formatted correctly.')
			end

			for k, v in pairs(super) do
				if not file[k] then
					file[k] = v
				end
			end
			return file
		end
	end
	return file
end

function ParseStringSize(self, parent, k, v)
	local parentSize = parent.Width
	if k == 'Height' or k == 'Y' then
		parentSize = parent.Height
	end
	local parts = {v}
	if type(v) == 'string' and string.find(v, ',') then
		parts = {}
		for word in string.gmatch(v, '([^,]+)') do
		    table.insert(parts, word)
		end
	end

	v = 0
	for i2, part in ipairs(parts) do
		if type(part) == 'string' and part:sub(#part) == '%' then
			v = v + math.ceil(parentSize * (tonumber(part:sub(1, #part-1)) / 100))
		else
			v = v + tonumber(part)
		end
	end
	return v
end

function ObjectFromFile(self, file, view)
	local env = getfenv()
	if env[file.Type] then
		if not env[file.Type].Initialise then
			error('Malformed Object: '..file.Type)
		end
		local object = {}

		if file.InheritView then
			file = self:InheritFile(file, file.InheritView)
		end
		
		object.AutoWidth = true
		for k, v in pairs(file) do
			if k == 'Width' or k == 'X' or k == 'Height' or k == 'Y' then
				v = self:ParseStringSize(view, k, v)
			end

			if k == 'Width' then
				object.AutoWidth = false
			end
			if k ~= 'Children' then
				object[k] = v
			else
				object[k] = {}
			end
		end

		object.Parent = view
		object.Bedrock = self
		if not object.Name then
			object.Name = file.Type
		end

		object = env[file.Type]:Initialise(object)

		if file.Children then
			for i, obj in ipairs(file.Children) do
				local _view = self:ObjectFromFile(obj, object)
				if not _view.Z then
					_view.Z = i
				end
				_view.Parent = object
				table.insert(object.Children, _view)
			end
		end

		if not object.OnClick then
			object.OnClick = function(...) return self:ClickObject(...) end
		end
		--object.OnUpdate = function(...) self:UpdateObject(...) end

		if object.OnUpdate then
			for k, v in pairs(env[file.Type]) do
				object:OnUpdate(k)
			end

			for k, v in pairs(object.__index) do
				object:OnUpdate(k)
			end
		end

		if object.Active then
			object.Bedrock:SetActiveObject(object)
		end
		if object.OnLoad then
			object:OnLoad()
		end
		object.Ready = true
		return object
	elseif not file.Type then
		error('No object type specified. (e.g. Type = "Button")')
	else
		error('No Object: '..file.Type..'. The API probably isn\'t loaded')
	end
end

function ReorderObjects(self)
	if self.View and self.View.Children then
		self.View:ReorderObjects()
	end
end

function AddObject(self, info, extra, first)
	return self.View:AddObject(info, extra, first)
end

function GetObject(self, name)
	return self.View:GetObject(name)
end

function GetObjects(self, name)
	return self.View:GetObjects(name)
end

function RemoveObject(self, name)
	return self.View:RemoveObject(name)
end

function RemoveObjects(self, name)
	return self.View:RemoveObjects(name)
end

DrawEvent = nil

function HandleDraw(self, event, id)
	if id == self.DrawEvent then
		self.DrawEvent = nil
		self:Draw()
	end
end

function ForceDraw(self)
	if not self.DrawEvent then--or self.DrawTimerExpiry <= os.clock() then
		self.DrawEvent = math.random()
		os.queueEvent('bedrock_draw', self.DrawEvent)
		-- self:StartTimer(function()
		-- 	self.DrawTimer = nil
		-- 	self:Draw()
		-- end, 0.05)
		-- self.DrawTimerExpiry = os.clock() + 0.1
	end
end

function DisplayWindow(self, _view, title, canClose)
	if canClose == nil then
		canClose = true
	end
	if type(_view) == 'string' then
		local h = fs.open(self.ViewPath.._view..'.view', 'r')
		if h then
			_view = textutils.unserialize(h.readAll())
			h.close()
		end
	end

	self.Window = self:AddObject({Type = 'Window', Z = 999, Title = title, CanClose = canClose})
	_view.Type = 'View'
	_view.Name = 'View'
	_view.Z = 1
	_view.BackgroundColour = _view.BackgroundColour or colours.white
	self.Window:SetView(self:ObjectFromFile(_view, self.Window))
end

function DisplayAlertWindow(self, title, text, buttons, callback)
	local func = function(btn)
		self.Window:Close()
		if callback then
			callback(btn.Text)
		end
	end
	local children = {}
	local usedX = -1
	if buttons then
		for i, text in ipairs(buttons) do
			usedX = usedX + 3 + #text
			table.insert(children, {
				["Y"]="100%,-1",
				["X"]="100%,-"..usedX,
				["Name"]=text.."Button",
				["Type"]="Button",
				["Text"]=text,
				OnClick = func
			})
		end
	end

	local width = usedX + 2
	if width < 28 then
		width = 28
	end

	local canClose = true
	if buttons and #buttons~=0 then
		canClose = false
	end

	local height = 0
	if text then
		height = #Helpers.WrapText(text, width - 2)
		table.insert(children, {
			["Y"]=2,
			["X"]=2,
			["Width"]="100%,-2",
			["Height"]=height,
			["Name"]="Label",
			["Type"]="Label",
			["Text"]=text
		})
	end
	local view = {
		Children = children,
		Width=width,
		Height=3+height+(canClose and 0 or 1),
		OnKeyChar = function(_view, keychar)
			func({Text=buttons[1]})
		end
	}
	self:DisplayWindow(view, title, canClose)
end

function DisplayTextBoxWindow(self, title, text, callback, textboxText, cursorAtEnd)
	textboxText = textboxText or ''
	local children = {
		{
			["Y"]="100%,-1",
			["X"]="100%,-4",
			["Name"]="OkButton",
			["Type"]="Button",
			["Text"]="Ok",
			OnClick = function()
				local text = self.Window:GetObject('TextBox').Text
				self.Window:Close()
				callback(true, text)
			end
		},
		{
			["Y"]="100%,-1",
			["X"]="100%,-13",
			["Name"]="CancelButton",
			["Type"]="Button",
			["Text"]="Cancel",
			OnClick = function()
				self.Window:Close()
				callback(false)
			end
		}
	}

	local height = -1
	if text and #text ~= 0 then
		height = #Helpers.WrapText(text, 26)
		table.insert(children, {
			["Y"]=2,
			["X"]=2,
			["Width"]="100%,-2",
			["Height"]=height,
			["Name"]="Label",
			["Type"]="Label",
			["Text"]=text
		})
	end
	table.insert(children,
		{
			["Y"]=3+height,
			["X"]=2,
			["Width"]="100%,-2",
			["Name"]="TextBox",
			["Type"]="TextBox",
			["Text"]=textboxText,
			["CursorPos"]=(cursorAtEnd and #textboxText or 0)
		})
	local view = {
		Children = children,
		Width=28,
		Height=5+height+(canClose and 0 or 1),
	}
	self:DisplayWindow(view, title)
	self.Window:GetObject('TextBox').OnChange = function(txtbox, event, keychar)
		if keychar == keys.enter then
			self.Window:Close()
			callback(true, txtbox.Text)
		end
	end
	self:SetActiveObject(self.Window:GetObject('TextBox'))
	self.Window.OnCloseButton = function()callback(false)end
end

local function isFolder(path)
	local _fs = fs
	if OneOS then
		_fs = OneOS.FS
	end
	
	if not _fs.isDir(path) then
		return false
	end

	local extension
	if OneOS and OneOS.System then
		extension = OneOS.System.RealExtension(path)
	elseif self.System then
		extension = self.System.RealExtension(path)
	else
		extension = self.Helpers.Extension(path)
	end

	return extension == ''
end

function DisplayOpenFileWindow(self, title, callback)
	title = title or 'Open File'
	local func = function(btn)
		self.Window:Close()
		if callback then
			callback(btn.Text)
		end
	end

	local sidebarItems = {}

	--this is a really, really super bad way of doing it
	local separator = '                               !'
	
	local _fs = fs
	if OneOS then
		_fs = OneOS.FS
	end

	local function addFolder(path, level)
		for i, v in ipairs(_fs.list(path)) do
			local fPath = path .. '/' .. v
			if fPath ~= '/rom' and fPath ~= '/Favourites' and fPath ~= '/.git' and _fs.isDir(fPath) then
				if isFolder(fPath) then
					table.insert(sidebarItems, level .. v..separator..fPath)
					addFolder(fPath, level .. '  ')
				end
			end
		end
	end
	
	if OneOS then
		_fs = OneOS.FS
	end

	addFolder('','')

	local currentFolder = ''
	local selectedPath = nil

	local goToFolder = nil

	local children = {
		{
			["Y"]="100%,-2",
			["X"]=1,
			["Height"]=3,
			["Width"]="100%",
			["BackgroundColour"]=colours.lightGrey,
			["Name"]="SidebarListView",
			["Type"]="View"
		},
		{
			["Y"]="100%,-1",
			["X"]="100%,-4",
			["Name"]="OkButton",
			["Type"]="Button",
			["Text"]="Ok",
			["BackgroundColour"]=colours.white,
			["Enabled"]=false,
			OnClick = function()
				if selectedPath then
					self.Window:Close()
					callback(true, Helpers.TidyPath(selectedPath))
				end
			end
		},
		{
			["Y"]="100%,-1",
			["X"]="100%,-13",
			["Name"]="CancelButton",
			["Type"]="Button",
			["Text"]="Cancel",
			["BackgroundColour"]=colours.white,
			OnClick = function()
				self.Window:Close()
				callback(false)
			end
		},
		{
			["Y"]=1,
			["X"]=1,
			["Height"]="100%,-3",
			["Width"]="40%,-1",
			["Name"]="SidebarListView",
			["Type"]="ListView",
			["CanSelect"]=true,
			["Items"]={
				["Computer"] = sidebarItems
			},
			OnSelect = function(listView, text)
				local _,s = text:find(separator)
				if s then
					local path = text:sub(s + 1)
					goToFolder(path)
				end
			end,
			OnClick = function(listView, event, side, x, y)
				if y == 1 then
					goToFolder('/')
				end
			end
		},
		{
			["Y"]=1,
			["X"]="40%",
			["Height"]="100%,-3",
			["Width"]=1,
			["Type"]="Separator"
		},
		{
			["Y"]=1,
			["X"]="40%,2",
			["Width"]="65%,-3",
			["Height"]=1,
			["Type"]="Label",
			["Name"]="PathLabel",
			["TextColour"]=colours.lightGrey,
			["Text"]='/'
		},
		{
			["Y"]=2,
			["X"]="40%,1",
			["Height"]="100%,-4",
			["Width"]="65%,-1",
			["Name"]="FilesListView",
			["Type"]="ListView",
			["CanSelect"]=true,
			["Items"]={},
			OnSelect = function(listView, text)
				selectedPath = Helpers.TidyPath(currentFolder .. '/' .. text)
				self.Window:GetObject('OkButton').Enabled = true
			end,
			OnClick = function(listView, event, side, x, y)
				if y == 1 then
					goToFolder('/')
				end
			end
		},
	}
	local view = {
		Children = children,
		Width=40,
		Height= Drawing.Screen.Height - 4,
		OnCloseButton=function()
			callback(false)
		end
	}
	self:DisplayWindow(view, title)

	goToFolder = function(path)
		path = Helpers.TidyPath(path)
		self.Window:GetObject('PathLabel').Text = path
		currentFolder = path

		local filesListItems = {}
		for i, v in ipairs(_fs.list(path)) do
			if not isFolder(v .. '/' .. path) then
				table.insert(filesListItems, v)
			end
		end
		self.Window:GetObject('OkButton').Enabled = false
		selectedPath = nil
		self.Window:GetObject('FilesListView').Items = filesListItems

	end

	if startPath then
		goToFolder(startPath)
	elseif OneOS then
		goToFolder('/Desktop/Documents/')
	else
		goToFolder('')
	end

	self.Window.OnCloseButton = function()callback(false)end
end

function DisplaySaveFileWindow(self, title, callback, extension, startPath)
	local _fs = fs
	if extension and extension:sub(1,1) ~= '.' then
		extension = '.' .. extension
	end
	extension = extension or ''

	title = title or 'Save File'
	local func = function(btn)
		self.Window:Close()
		if callback then
			callback(btn.Text)
		end
	end

	local sidebarItems = {}

	--this is a really, really super bad way of doing it
	local separator = '                                                       !'

	local function addFolder(path, level)
		for i, v in ipairs(_fs.list(path)) do
			local fPath = path .. '/' .. v
			if fPath ~= '/rom' and fPath ~= '/Favourites' and fPath ~= '/.git' and _fs.isDir(fPath) then
				if isFolder(fPath) then
					table.insert(sidebarItems, level .. v..separator..fPath)
					addFolder(fPath, level .. '  ')
				end
			end
		end
	end
	
	if OneOS then
		_fs = OneOS.FS
	end
	addFolder('','')

	local currentFolder = ''
	local selectedPath = nil

	local goToFolder = nil

	local function updatePath()
		local text = self:GetObject('FileNameTextBox').Text
		if #text == 0 then
			self.Window:GetObject('OkButton').Enabled = false
			selectedPath = Helpers.TidyPath(currentFolder)
		else
			self.Window:GetObject('OkButton').Enabled = true
			selectedPath = Helpers.TidyPath(currentFolder .. '/' .. text .. extension)
		end
		self:GetObject('PathLabel').Text = selectedPath
	end

	local children = {
		{
			["Y"]="100%,-2",
			["X"]=1,
			["Height"]=3,
			["Width"]="100%",
			["BackgroundColour"]=colours.lightGrey,
			["Type"]="View"
		},
		{
			["Y"]="100%,-1",
			["X"]="100%,-4",
			["Name"]="OkButton",
			["Type"]="Button",
			["Text"]="Ok",
			["BackgroundColour"]=colours.white,
			["Enabled"]=false,
			OnClick = function()
				if selectedPath then
					local text = self:GetObject('FileNameTextBox').Text
					self.Window:Close()
					callback(true, selectedPath, text)
				end
			end
		},
		{
			["Y"]="100%,-1",
			["X"]="100%,-13",
			["Name"]="CancelButton",
			["Type"]="Button",
			["Text"]="Cancel",
			["BackgroundColour"]=colours.white,
			OnClick = function()
				self.Window:Close()
				callback(false)
			end
		},
		{
			["Y"]="100%,-2",
			["X"]=3,
			["Width"]="100%,-4",
			["Name"]="PathLabel",
			["Type"]="Label",
			["Text"]="/",
			["TextColour"]=colours.grey
		},
		{
			["Y"]="100%,-1",
			["X"]=3,
			["Width"]="100%,-17",
			["Name"]="FileNameTextBox",
			["Type"]="TextBox",
			["Placeholder"]="File Name",
			["Active"]=true,
			["BackgroundColour"]=colours.white,
			OnChange = function(_self, event, keychar)
				if keychar == keys.enter then
					self:GetObject('OkButton'):OnClick()
				else
					updatePath()
				end
			end
		},
		{
			["Y"]=1,
			["X"]=2,
			["Height"]="100%,-3",
			["Width"]="100%,-1",
			["Name"]="SidebarListView",
			["Type"]="ListView",
			["CanSelect"]=true,
			["Items"]={
				["Computer"] = sidebarItems
			},
			OnSelect = function(listView, text)
				local _,s = text:find(separator)
				if s then
					local path = text:sub(s + 1)
					goToFolder(path)
				end
			end,
			OnClick = function(listView, event, side, x, y)
				if y == 1 then
					goToFolder('/')
				end
			end
		},
	}
	local view = {
		Children = children,
		Width=35,
		Height= Drawing.Screen.Height - 4,
		OnCloseButton=function()
			callback(false)
		end
	}
	self:DisplayWindow(view, title)

	self:SetActiveObject(self.Window:GetObject('FileNameTextBox'))

	goToFolder = function(path)
		path = Helpers.TidyPath(path)
		currentFolder = path
		selectedPath = nil
		updatePath()
	end

	if startPath then
		goToFolder(startPath)
	elseif OneOS then
		goToFolder('/Desktop/Documents/')
	else
		goToFolder('')
	end

	self.Window.OnCloseButton = function()callback(false)end
end

function RegisterEvent(self, event, func)
	if not self.EventHandlers[event] then
		self.EventHandlers[event] = {}
	end
	table.insert(self.EventHandlers[event], func)
end

function StartRepeatingTimer(self, func, interval)
	local int = interval
	if type(int) == 'function' then
		int = int()
	end
	if not int or int <= 0 then
		return
	end
	local timer = os.startTimer(int)

	self.Timers[timer] = {func, true, interval}
	return timer
end

function StartTimer(self, func, delay)
	local timer = os.startTimer(delay)
	self.Timers[timer] = {func, false}
	return timer
end

function StopTimer(self, timer)
	if self.Timers[timer] then
		self.Timers[timer] = nil
	end
end

function HandleTimer(self, event, timer)
	if self.Timers[timer] then
		local oldTimer = self.Timers[timer]
		self.Timers[timer] = nil
		local new = nil
		if oldTimer[2] then
			new = self:StartRepeatingTimer(oldTimer[1], oldTimer[3])
		end
		if oldTimer and oldTimer[1] then
			oldTimer[1](new, timer)
		end
	elseif self.OnTimer then
		self.OnTimer(self, event, timer)
	end
end

function HandlePaste(self, event, text)
	local activeObject = self:GetActiveObject()
	if activeObject and activeObject.OnPaste then
		activeObject:OnPaste(event, text)
	end
end

function SetActiveObject(self, object)
	if object then
		if object ~= self.ActiveObject then
			self.ActiveObject = object
			object:ForceDraw()
		end
	elseif self.ActiveObject ~= nil then
		self.ActiveObject = nil
		self.CursorPos = nil
		self.View:ForceDraw()
	end
end

function GetActiveObject(self)
	return self.ActiveObject
end

OnTimer = nil
OnClick = nil
OnKeyChar = nil
OnDrag = nil
OnScroll = nil
OnViewLoad = nil
OnViewClose = nil
OnDraw = nil
OnQuit = nil

local eventFuncs = {
	OnClick = {'mouse_click', 'monitor_touch'},
	OnKeyChar = {'key', 'char'},
	OnDrag = {'mouse_drag'},
	OnScroll = {'mouse_scroll'},
	HandleClick = {'mouse_click', 'mouse_drag', 'mouse_scroll', 'monitor_touch'},
	HandleKeyChar = {'key', 'char'},
	HandlePaste = {'paste'},
	HandleTimer = {'timer'},
	HandleDraw = {'bedrock_draw'}
}

local drawCalls = 0
local ignored = 0
function Draw(self)
	self.IsDrawing = true
	if self.OnDraw then
		self:OnDraw()
	end

	if self.View and self.View:NeedsDraw() then
		self.View:Draw()
		Drawing.DrawBuffer()
		if isDebug then
			drawCalls = drawCalls + 1
		end
	elseif not self.View then
		print('No loaded view. You need to do program:LoadView first.')
	end	

	if self:GetActiveObject() and self.CursorPos and type(self.CursorPos[1]) == 'number' and type(self.CursorPos[2]) == 'number' and self.CursorPos[1] >= 1 and self.CursorPos[1] <= Drawing.Screen.Width and self.CursorPos[2] >= 1 and self.CursorPos[2] <= Drawing.Screen.Height then
		term.setCursorPos(self.CursorPos[1], self.CursorPos[2])
		term.setTextColour(self.CursorColour)
		term.setCursorBlink(true)
	else
		term.setCursorBlink(false)
	end

	self.IsDrawing = false
end

function EventHandler(self)
	local event = { os.pullEventRaw() }
	
	if self.EventHandlers[event[1]] then
		for i, e in ipairs(self.EventHandlers[event[1]]) do
			e(self, unpack(event))
		end
	end
end

function Quit(self)
	self.Running = false
	if self.OnQuit then
		self:OnQuit()
	end
	if OneOS then
		OneOS.Close()
	end
end

function Run(self, ready)
	-- Bypass the window API
	-- This doesn't really work...
	-- term.redirect(term.native())
	-- if term.native then
	-- 	if type(term.native) == 'function' then
	-- 		term.redirect(term.native())
	-- 	else
	-- 		term.redirect(term.native)
	-- 	end
	-- end
	
	if not  term.isColour or not term.isColour() then
		print('This program requires an advanced (golden) comptuer to run, sorry.')
		error('', 0)
	end

	for name, events in pairs(eventFuncs) do
		if self[name] then
			for i, event in ipairs(events) do
				self:RegisterEvent(event, self[name])
			end
		end
	end

	if self.AllowTerminate then
		self:RegisterEvent('terminate', function()error('Terminated', 0) end)
	end

	if self.DefaultView and self.DefaultView ~= '' and fs.exists(self.ViewPath..self.DefaultView..'.view') then
		self:LoadView(self.DefaultView)
	end

	if ready then
		ready()
	end
	
	self:Draw()

	while self.Running do
		self:EventHandler()
	end
end